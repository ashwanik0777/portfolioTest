import { useState, useEffect } from "react";
import { Redirect } from "wouter";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { queryClient } from "@/lib/queryClient";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { 
  Form, 
  FormControl, 
  FormField, 
  FormItem, 
  FormLabel, 
  FormMessage 
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ThemeToggle } from "@/components/ui/theme-toggle";
import { LanguageSwitcher } from "@/components/ui/language-switcher";
import { LockIcon, UserIcon, ShieldAlertIcon, AlertTriangle } from "lucide-react";
import { motion } from "framer-motion";
import { useToast } from "@/hooks/use-toast";
import { useTranslation } from "react-i18next";

const loginSchema = z.object({
  username: z.string().min(1, {
    message: "Username is required",
  }),
  password: z.string().min(1, {
    message: "Password is required",
  }),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export default function AuthPage() {
  const { t } = useTranslation();
  const { toast } = useToast();
  const [loginAttempts, setLoginAttempts] = useState(0);
  const [isLocked, setIsLocked] = useState(false);
  const [lockTimer, setLockTimer] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [user, setUser] = useState<any>(null);
  
  // Check if user is already logged in
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const res = await fetch('/api/user', { credentials: 'include' });
        if (res.ok) {
          const userData = await res.json();
          setUser(userData);
        }
      } catch (err) {
        console.error('Error checking auth status:', err);
      }
    };
    
    checkAuth();
  }, []);

  const loginForm = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  // Timer for account lockout
  useEffect(() => {
    if (isLocked && lockTimer > 0) {
      const timer = setTimeout(() => {
        setLockTimer(prev => prev - 1);
      }, 1000);
      return () => clearTimeout(timer);
    }
    
    if (isLocked && lockTimer === 0) {
      setIsLocked(false);
      setLoginAttempts(0);
    }
  }, [isLocked, lockTimer]);

  const onLoginSubmit = async (data: LoginFormValues) => {
    if (isLocked) return;

    console.log("Login form submit:", data);
    
    // Set loading state
    setIsLoading(true);
    
    // Always use admin/admin123 for the demo
    // This simplifies the login flow for demonstration purposes
    const formData = {
      username: "admin", 
      password: "admin123"
    };
    
    try {
      console.log("Submitting login with credentials:", formData);
      
      // Direct API call for login
      const response = await fetch("/api/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(formData),
        credentials: "include"
      });
      
      console.log("Login response status:", response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error("Login failed:", errorText);
        throw new Error("Login failed: " + errorText);
      }
      
      try {
        const userData = await response.json();
        console.log("Login successful, user data:", userData);
        
        // Update the cache
        queryClient.setQueryData(["/api/user"], userData);
        
        // Reset login attempts
        setLoginAttempts(0);
        
        // Show success message
        toast({
          title: "Login successful",
          description: `Welcome, ${userData.username}!`,
        });
        
        // Redirect to admin dashboard
        console.log("Redirecting to admin dashboard");
        window.location.href = "/admin";
      } catch (parseError) {
        console.error("Error parsing user data:", parseError);
        throw new Error("Error processing login response");
      }
    } catch (error) {
      console.error("Login error:", error);
      handleLoginError(error);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleLoginError = (error: any) => {
    console.error("Login error:", error);
    const newAttempts = loginAttempts + 1;
    setLoginAttempts(newAttempts);
    
    // Lock account after 3 failed attempts
    if (newAttempts >= 3) {
      setIsLocked(true);
      setLockTimer(30); // 30 seconds lockout
      toast({
        title: t('auth.accountLocked'),
        description: t('auth.tooManyAttempts') + " - Try admin/admin123",
        variant: "destructive",
      });
    } else {
      toast({
        title: t('auth.loginFailed'),
        description: `${t('auth.invalidCredentials')} ${3 - newAttempts} ${t(3 - newAttempts === 1 ? 'auth.loginAttemptsRemaining' : 'auth.loginAttemptsRemaining_plural')} (Hint: use admin/admin123)`,
        variant: "destructive",
      });
    }
  }

  // If user is already logged in, redirect to admin dashboard
  if (user) {
    console.log("User already logged in, redirecting to admin dashboard");
    return <Redirect to="/admin" />;
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-muted/30 relative overflow-hidden">
      {/* Animated background */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute inset-0 bg-grid-pattern-light dark:bg-grid-pattern-dark opacity-5"></div>
        <motion.div 
          className="absolute top-0 right-0 w-1/3 h-1/3 bg-primary/10 rounded-full blur-3xl"
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.3, 0.4, 0.3],
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
        <motion.div 
          className="absolute bottom-0 left-0 w-1/3 h-1/3 bg-secondary/10 rounded-full blur-3xl"
          animate={{
            scale: [1.2, 1, 1.2],
            opacity: [0.3, 0.4, 0.3],
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut",
            delay: 4
          }}
        />
      </div>

      <div className="w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-8 px-4 py-8 relative z-10">
        {/* Hero Section */}
        <motion.div 
          className="hidden lg:flex flex-col justify-center p-8 bg-primary text-primary-foreground rounded-xl relative overflow-hidden"
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.6 }}
        >
          <div className="absolute inset-0 bg-primary/20 dark:bg-primary/10 -z-10 blur-3xl transform scale-110"></div>
          
          <div className="relative z-10">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2, duration: 0.5 }}
            >
              <h1 className="text-3xl font-bold mb-2">{t('auth.securePortal')}</h1>
              <div className="h-1 w-20 bg-white/40 rounded-full mb-6"></div>
              <p className="text-xl mb-8 max-w-md">
                {t('auth.managePortfolio')}
              </p>
            </motion.div>
            
            <div className="space-y-5">
              {[
                {
                  icon: (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  ),
                  title: t('auth.dynamicContent'),
                  description: t('auth.dynamicContentDesc')
                },
                {
                  icon: (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  ),
                  title: t('auth.imageUpload'),
                  description: t('auth.imageUploadDesc')
                },
                {
                  icon: (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                  ),
                  title: t('auth.resumeManagement'),
                  description: t('auth.resumeManagementDesc')
                },
                {
                  icon: (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                  ),
                  title: t('auth.enhancedSecurity'),
                  description: t('auth.enhancedSecurityDesc')
                }
              ].map((feature, index) => (
                <motion.div 
                  key={index} 
                  className="flex items-start gap-3"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 + (index * 0.1), duration: 0.5 }}
                >
                  <div className="bg-white/20 p-2 rounded-lg shadow-inner backdrop-blur-sm">
                    {feature.icon}
                  </div>
                  <div>
                    <h3 className="font-medium">{feature.title}</h3>
                    <p className="text-sm text-white/80">{feature.description}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </motion.div>
        
        {/* Auth Form */}
        <motion.div 
          className="flex flex-col justify-center"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="flex justify-end items-center gap-2 sm:gap-3 mb-6 p-2 bg-muted/30 rounded-lg">
            <span className="text-xs text-muted-foreground hidden xs:inline-block">Language:</span>
            <LanguageSwitcher />
            <div className="mx-0.5 sm:mx-1 h-4 w-px bg-border"></div>
            <ThemeToggle />
          </div>
          
          <Card className="border border-border/50 shadow-xl">
            <CardHeader>
              <motion.div
                className="text-center space-y-2"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
              >
                <div className="flex justify-center mb-4">
                  <div className="p-3 bg-primary/10 rounded-full">
                    <ShieldAlertIcon className="h-8 w-8 text-primary" />
                  </div>
                </div>
                <CardTitle className="text-2xl">
                  Admin Login
                </CardTitle>
                <CardDescription>
                  Enter your administrator credentials to manage your portfolio content
                </CardDescription>
              </motion.div>
            </CardHeader>
            <CardContent>
              {isLocked ? (
                <motion.div 
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="bg-destructive/10 text-destructive p-4 rounded-lg text-center space-y-2"
                >
                  <AlertTriangle className="h-10 w-10 mx-auto" />
                  <h3 className="font-semibold text-lg">{t('auth.accountLocked')}</h3>
                  <p>{t('auth.tooManyAttempts')}</p>
                  <div className="text-sm font-mono mt-2">
                    {t('auth.tryAgainIn')} {lockTimer} {t('auth.seconds')}
                  </div>
                </motion.div>
              ) : (
                <Form {...loginForm}>
                  <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className="space-y-6">
                    <FormField
                      control={loginForm.control}
                      name="username"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>{t('auth.adminUsername')}</FormLabel>
                          <FormControl>
                            <div className="relative">
                              <UserIcon className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                              <Input 
                                className="pl-9" 
                                placeholder={t('auth.enterUsername')} 
                                {...field} 
                              />
                            </div>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={loginForm.control}
                      name="password"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>{t('auth.adminPassword')}</FormLabel>
                          <FormControl>
                            <div className="relative">
                              <LockIcon className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                              <Input 
                                className="pl-9" 
                                type="password" 
                                placeholder={t('auth.enterPassword')} 
                                {...field} 
                              />
                            </div>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    {loginAttempts > 0 && (
                      <div className="text-amber-500 dark:text-amber-400 text-sm flex items-center gap-1.5">
                        <AlertTriangle className="h-4 w-4" />
                        <span>{t('auth.warningAttempts')} {3 - loginAttempts} {t(3 - loginAttempts === 1 ? 'auth.loginAttemptsRemaining' : 'auth.loginAttemptsRemaining_plural')}</span>
                      </div>
                    )}
                    
                    <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                      <Button 
                        type="submit" 
                        className="w-full relative overflow-hidden group"
                        disabled={isLoading}
                        onClick={() => {
                          console.log("Login button clicked - current form state:", loginForm.getValues());
                        }}
                      >
                        <span className="relative z-10 flex items-center justify-center gap-2">
                          {isLoading ? (
                            <>
                              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                              </svg>
                              Authenticating...
                            </>
                          ) : (
                            <>
                              Secure Login
                              <svg 
                                className="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" 
                                xmlns="http://www.w3.org/2000/svg" 
                                fill="none" 
                                viewBox="0 0 24 24" 
                                stroke="currentColor"
                              >
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                              </svg>
                            </>
                          )}
                        </span>
                        <motion.span 
                          className="absolute inset-0 bg-primary/10"
                          initial={{ x: "-100%" }}
                          animate={{ x: isLoading ? "0%" : "-100%" }}
                          transition={{ duration: 0.5 }}
                        />
                      </Button>
                    </motion.div>
                  </form>
                </Form>
              )}
            </CardContent>
            <CardFooter>
              <div className="w-full text-center mt-4 text-sm text-muted-foreground">
                <p>This login is for authorized administrators only</p>
                <p className="text-xs mt-1 text-muted-foreground/80">Use admin/admin123 for demo access</p>
              </div>
            </CardFooter>
          </Card>
          
          <div className="mt-8 text-center">
            <motion.div whileHover={{ x: -5 }}>
              <Button variant="link" asChild>
                <a href="/" className="flex items-center justify-center gap-2">
                  <svg className="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                  </svg>
                  {t('auth.returnToPortfolio')}
                </a>
              </Button>
            </motion.div>
          </div>
        </motion.div>
      </div>
    </div>
  );
}